import asyncio
import uuid
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js
from encrypt import *
from decrypt import *
from encrypt_CBC import *
from decrypt_CBC import *

chats = {}
MAX_USERS_PER_CHAT = 2
MAX_MESSAGES_COUNT = 100


async def main():
    global chats

    put_markdown("## ‚úâÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä")

    action = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=["–°–æ–∑–¥–∞—Ç—å —á–∞—Ç", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É"])

    if action == "–°–æ–∑–¥–∞—Ç—å —á–∞—Ç":
        mode = await actions("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", buttons=["ECB", "CBC"])
        put_markdown(f"### –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {mode}")
        chat_name = await input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞", required=True, placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞")
        chat_id = str(uuid.uuid4())
        chats[chat_id] = {'name': chat_name, 'messages': [], 'users': set(), 'lock': asyncio.Lock(), 'is_deleted': False, 'mode': mode}
        put_markdown(f"### ‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω")
        await join_chat(chat_id)
    elif action == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É":
        chat_id = await input("ID —á–∞—Ç–∞", required=True, placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞")
        if chat_id not in chats:
            put_error("–ß–∞—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await join_chat(chat_id)


async def join_chat(chat_id):
    global chats
    chat = chats[chat_id]

    async with chat['lock']:
        if len(chat['users']) >= MAX_USERS_PER_CHAT:
            put_error("–ß–∞—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        nickname = await input("–í–∞—à–µ –∏–º—è", required=True, placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
        chat['users'].add(nickname)

    put_markdown(f"## üí¨ –ß–∞—Ç: {chat['name']}. <span style='font-size: 20px;'> üîë –ó–∞—â–∏—â–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è RC6 ({chat['mode']}).</span>")

    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    put_buttons(['–ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞'], onclick=lambda btn: toast(f"ID —á–∞—Ç–∞: {chat_id}"))

    put_buttons(['–£–¥–∞–ª–∏—Ç—å —á–∞—Ç'], onclick=lambda btn: delete_chat(chat_id))

    msg_box.append(put_markdown(f'üë§{nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(-–ª–∞—Å—å) –∫ —á–∞—Ç—É'))

    refresh_task = run_async(refresh_msg(chat, nickname, msg_box))

    while True:
        if chat['is_deleted']:
            toast("–ß–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            run_js('window.location.reload()')
            break

        data = await input_group("üí≠ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
            input(placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ...", name="msg"),
            actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]) 
        ], validate=lambda m: ('msg', "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è") if m["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not m['msg'] else None)

        if chat['is_deleted']:
            msg_box.append(put_markdown(f'üö´ –ß–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω.'))
            await asyncio.sleep(1)
            break

        msg_box.append(put_markdown(f"{nickname}: {data['msg']}"))
        global encrypt_result
        if chat['mode'] == "ECB":
            encrypt_result = encrypt(data['msg'])
        elif chat['mode'] == "CBC":
            encrypt_result = encrypt_CBC(data['msg'])
        print('(–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–ª—é—á –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞):', encrypt_result)
        chat['messages'].append((nickname, encrypt_result))

    refresh_task.close()

    async with chat['lock']:
        chat['users'].remove(nickname)

    if not chat['users']:
        del chats[chat_id]

    put_buttons(['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'], onclick=lambda btn: run_js('window.location.reload()'))


async def refresh_msg(chat, nickname, msg_box):
    last_idx = len(chat['messages'])

    while True:
        await asyncio.sleep(1)

        for m in chat['messages'][last_idx:]:
            if m[0] != nickname:
                if chat['mode'] == "ECB":
                    decrypted_message = decrypt(m[1], encrypt_result[1])
                elif chat['mode'] == "CBC":
                    decrypted_message = decrypt_CBC(m[1], encrypt_result[1], encrypt_result[2])
                print('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', decrypted_message)
                msg_box.append(put_markdown(f"`{m[0]}`: {decrypted_message}"))

        if len(chat['messages']) > MAX_MESSAGES_COUNT:
            chat['messages'] = chat['messages'][len(chat['messages']) // 2:]

        last_idx = len(chat['messages'])


def delete_chat(chat_id):
    global chats
    if chat_id in chats:
        chats[chat_id]['is_deleted'] = True
        del chats[chat_id]
        toast("–ß–∞—Ç —É–¥–∞–ª–µ–Ω.")
        run_js('window.location.reload()')


if __name__ == "__main__":
    start_server(main, debug=True, port=8080, cdn=False)
